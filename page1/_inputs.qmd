
```{ojs}
widget_to_print = {
  switch (filter_choice) {
    case filter_checkbox_length:
      console.log("Choosing filter by length")
      return Inputs.bind(
          Range([1, max_length], {unit: "km"}),
          viewof climb_length
      )
    case filter_checkbox_deniv:
      console.log("Choosing filter by height gain")
      return Inputs.bind(
        Range([1, max_denivelation], {unit: "m", value: 1200}),
        viewof climb_height
      )
    case filter_checkbox_category:
      console.log("Choosing filter by category")
      return Inputs.bind(
        Inputs.checkbox(
          categories,
          {
            sort: "descending",
            value: ["HC", "Cat 1"],
            //label: category_label
          }
        ),
        viewof category
      )
    case filter_checkbox_slope:
      console.log("Choosing filter by average slope")
      return Inputs.bind(
        Range([0, max_slope], {unit: "%", step: 0.2}),
        viewof climb_slope
      )
    case filter_multiselect_group:
      console.log("Choosing filter by climbing group")
      return Inputs.bind(
         multiAutoSelect({
          options: massifs.sort(),
          placeholder: label_search_massif,
          value: "Arves et Grandes Rousses, France"
        }),
         viewof selected_massif
      )
    default:
      return false
  }
}

function filter_active_width(d, widget) {
  switch (widget) {
    case filter_checkbox_deniv:
      return d.denivellation > climb_height;
    case filter_checkbox_length:
      return d.longueur > climb_length;
    case filter_checkbox_category:
      return category.includes(d.category);
    case filter_checkbox_slope:
      return d.percent_moyen > climb_slope;
    case filter_multiselect_group :
      return selected_massif.includes(d.massif);
    default:
      return false; // or any default case handling you prefer
  }
}

```


<!---------------------
Visible filters
----------------------->

```{ojs}
//| output: true
viewof mode = Inputs.radio(new Map([[search_label_choice, "search"], [explorer_label_choice, "explorer"]]), {value: "explorer"})
```


<!-----------
Other inputs
------------->

```{ojs}
viewof search = Inputs.search(
  cols, {placeholder: label_search_widget, datalist: ["nom", "d√©part", "massif"]}
)
```

```{ojs}
table_selected = Inputs.table(
  search,
  {
    columns: [
      "nom",
      "depart",
      "longueur",
      "denivellation",
      "altitude",
      "percent_moyen",
      "percent_maximal"
    ],
    header: {
        nom: header_table_name,
        depart: header_table_departure,
        longueur: filter_checkbox_length,
        denivellation: filter_checkbox_deniv,
        altitude: header_table_alt,
        percent_moyen: header_table_avgpercent,
        percent_maximal: header_table_maxpercent
      },
    sort: "denivellation", reverse: true
})
```


```{ojs}
viewof filter_choice = Inputs.select(
  [filter_checkbox_length, filter_checkbox_deniv, filter_checkbox_category, filter_checkbox_slope, filter_multiselect_group],
  {value: filter_checkbox_deniv}
  )
```


<!--------------------------
Behind the stage filters
--------------------------->

```{ojs}
viewof selected_massif = multiAutoSelect({
  options: massifs.sort(),
  placeholder: label_search_massif,
  value: "Arves et Grandes Rousses, France"
})
```


```{ojs}
viewof climb_slope = Inputs.range([0, max_slope], {step: 0.2})
viewof climb_length = Inputs.range([0, max_length], {step: 1})
viewof climb_height = Inputs.range([0, max_denivelation], {step: 1})
viewof category = Inputs.checkbox(
  categories,
  {sort: "descending", value: ["HC", "Cat 1"]}
)
```


