
```{ojs}
widget_to_print = {
  switch (filter_choice) {
    case filter_checkbox_length:
      console.log("Choosing filter by length")
      return Inputs.bind(
          Range([1, max_length], {unit: "km"}),
          viewof climb_length
      )
    case filter_checkbox_deniv:
      console.log("Choosing filter by height gain")
      return Inputs.bind(
        Range([1, max_denivelation], {unit: "m"}),
        viewof climb_height
      )
    case filter_checkbox_category:
      console.log("Choosing filter by category")
      return Inputs.bind(
        Inputs.checkbox(
          categories,
          {
            sort: "descending",
            value: ["HC", "Cat 1"],
            //label: category_label
          }
        ),
        viewof category
      )
    case filter_checkbox_slope:
      console.log("Choosing filter by average slope")
      return Inputs.bind(
        Range([0, max_slope], {unit: "%", step: 0.2}),
        viewof climb_slope
      )
    default:
      return false
  }
}

function filter_active_width(d, widget) {
  switch (widget) {
    case filter_checkbox_deniv:
      return d.denivellation > climb_height;
    case filter_checkbox_length:
      return d.longueur > climb_length;
    case filter_checkbox_category:
      return category.includes(d.category);
    case filter_checkbox_slope:
      return d.percent_moyen > climb_slope;
    default:
      return false; // or any default case handling you prefer
  }
}

```


<!---------------------
Visible filters
----------------------->

```{ojs}
//| output: true
viewof mode = Inputs.radio(new Map([[search_label_choice, "search"], [explorer_label_choice, "explorer"]]), {value: "explorer"})
```


<!------------------
Lang
-------------------->

```{ojs}
viewof lang = startStop()
```


```{ojs}
english = document.getElementById("button_english")
french = document.getElementById("button_french")

function change(lang_on, lang_off) {
  if (!lang_on.classList.contains("current_lang")) {
    // if the span that the user clicks on does not have the "current_lang" class
    lang_on.classList.add("current_lang");
    // add the "current_lang" class to it
    lang_off.classList.remove("current_lang");
    // remove the "current_lang" class from the other span
  }
}

english.addEventListener("click", function() {
    change(english, french);
  }, false
);
// add an event listener to listen to when the user clicks on one of the language span tags
// this triggers our custom "change" function, which we will define later

french.addEventListener("click", function() {
    change(french, english);
  }, false
);
```

```{ojs}
startStop = () => {
const buttons = html`
<form class="form-language-switcher">
  <input value="ðŸ‡«ðŸ‡·" type="button" name="stop" id="button_french" class="button_lang current_lang">
  <input value="ðŸ‡¬ðŸ‡§ ðŸ‡ºðŸ‡¸" type="button" name="start" id="button_english" class="button_lang">
</form>
`
buttons.value = "fr"

// French button  
buttons.stop.onclick = event => {
  buttons.value = "fr";
  event.preventDefault(); // Donâ€™t submit the form.
  buttons.dispatchEvent(new CustomEvent("input"));                      
  const french = document.getElementById("button_french") ;
  const english = document.getElementById("button_english") ;
  french.classList.add("current_lang")
  english.classList.remove("current_lang")
}
// English button  
buttons.start.onclick = event => {
  buttons.value = "en";
  event.preventDefault(); // Donâ€™t submit the form.
  buttons.dispatchEvent(new CustomEvent("input")); 
  const french = document.getElementById("button_french") ;
  const english = document.getElementById("button_english") ;
  english.classList.add("current_lang")
  french.classList.remove("current_lang")
}

return buttons
}
```

<!-----------
Other inputs
------------->

```{ojs}
viewof search = Inputs.search(
  cols, {placeholder: label_search_widget, datalist: ["nom", "dÃ©part", "massif"]}
)
```

```{ojs}
table_selected = Inputs.table(
  search,
  {
    columns: [
      "nom",
      "depart",
      "longueur",
      "denivellation",
      "altitude",
      "percent_moyen",
      "percent_maximal"
    ],
    header: {
        nom: header_table_name,
        depart: header_table_departure,
        longueur: filter_checkbox_length,
        denivellation: filter_checkbox_deniv,
        altitude: header_table_alt,
        percent_moyen: header_table_avgpercent,
        percent_maximal: header_table_maxpercent
      },
    sort: "denivellation", reverse: true
})
```


```{ojs}
viewof filter_choice = Inputs.select(
  [filter_checkbox_length, filter_checkbox_deniv, filter_checkbox_category, filter_checkbox_slope],
  {value: filter_checkbox_deniv}
  )
```


<!--------------------------
Behind the stage filters
--------------------------->

```{ojs}
viewof climb_slope = Inputs.range([0, max_slope], {step: 0.2})
viewof climb_length = Inputs.range([0, max_length], {step: 1})
viewof climb_height = Inputs.range([0, max_denivelation], {step: 1})
viewof category = Inputs.checkbox(
  categories,
  {sort: "descending", value: ["HC", "Cat 1"]}
)
```


<!-----------------------------
Functions for inputs
------------------------------->


```{ojs}
function Range(range, options = {}) {
  const [min, max] = range;
  const {
    className = "Range",
    vertical = false,
    label = null,
    format = (x) => +x,
    step = 1,
    value = (min + max) / 2,
    style = "",
    labelStyle = "",
    rangeStyle = "",
    valueStyle = "",
    unit = "" // New option for specifying a unit
  } = options;
  const rangeWrap = htl.html`<div class=${className} style="${style}"></div>`;
  Object.assign(rangeWrap.style, {
    display: "inline-flex",
    position: "relative",
    userSelect: "none",
    alignItems: "center",
    gap: "4px"
  });
  const valueDisplay = htl.html`<output style="${valueStyle}"></output>`;
  Object.assign(valueDisplay.style, {
    display: "inline-block"
  });
  const rangeInput = htl.html`<input type=range min=${min} max=${max} step=${step} value=${value} style=${rangeStyle}></input>`;
  Object.assign(rangeInput.style, {
    display: "inline-block"
  });
  if (vertical) {
    rangeInput.setAttribute("orient", "vertical");
    rangeInput.style.writingMode = "bt-lr";
    rangeInput.style["-webkit-appearance"] = "slider-vertical";
    rangeInput.style.width = "8px";
  }

  rangeWrap.append(rangeInput, valueDisplay);

  if (label) {
    const labelElement = htl.html`<label style=${labelStyle}>${label}</label>`;
    rangeWrap.prepend(labelElement);
  }

  rangeInput.oninput = () => {
    // Append the unit to the formatted number
    valueDisplay.textContent = `${format(rangeInput.valueAsNumber)}${unit}`;
    rangeWrap.value = rangeWrap.valueAsNumber = rangeInput.valueAsNumber;
    rangeWrap.dispatchEvent(new CustomEvent("input"));
  };

  rangeInput.oninput(); // Initialize the displayed value
  return rangeWrap;
}
```
