```{ojs}
raw = {
  // URLs of the GeoJSON files
  const geojsonUrl1 = "https://minio.lab.sspcloud.fr/lgaliana/cyclisme/data/geojson/alpes-nord-sommets.geojson";
  const geojsonUrl2 = "https://minio.lab.sspcloud.fr/lgaliana/cyclisme/data/geojson/alpes-sud-sommets.geojson"; // Replace this with the URL of the second GeoJSON

  // Fetch the first GeoJSON
  const fetchGeoJSON1 = fetch(geojsonUrl1).then(response => response.json());

  // Fetch the second GeoJSON
  const fetchGeoJSON2 = fetch(geojsonUrl2).then(response => response.json());

  // When both GeoJSONs are fetched, combine them
  let raw = Promise.all([fetchGeoJSON1, fetchGeoJSON2]).then(values => {
    const combinedFeatures = [...values[0].features, ...values[1].features]; // Combine features from both GeoJSON files

    // Create a new GeoJSON object with combined features
    const combinedGeoJSON = {
      type: "FeatureCollection",
      features: combinedFeatures
    };

    return combinedGeoJSON

  }).catch(error => {
    console.error("Error fetching or combining GeoJSONs:", error);
  });

  return raw
}
```

```{ojs}
//raw = fetch(
//    "https://minio.lab.sspcloud.fr/lgaliana/cyclisme/data/geojson/alpes-nord-sommets.geojson"
//  ).then(
//    (response) => response.json()
//  )
sommets = geo.filter(raw, (d) => !d.vtt)
cols = sommets.features.map(d=>d.properties)

max_length = d3.max(
  sommets.features.map(d=>d.properties.longueur)
)

max_denivelation = d3.max(
  sommets.features.map(d=>d.properties.denivellation)
)

max_slope = d3.max(
  sommets.features.map(d=>d.properties.percent_moyen)
)
```

```{ojs}
categories = unique(sommets.features.map(d => d.properties.category))
```



```{ojs}
selectedRoute = d3.json(`https://minio.lab.sspcloud.fr/lgaliana/cyclisme/data/geojson/split/${selectedClimb.id}.geojson`)
```


```{ojs}
details_altitude = selectedRoute.features[0].geometry.coordinates.map((coord, index) => {
  return { index: index, altitude: coord[2]}
});
```

```{ojs}
printed_points = {
  let printed_points;
  if (mode === "explorer") {
      printed_points = geo.filter(sommets, (d) => filter_active_width(d, filter_choice));
  } else {
      const searchIds = search.map(s => s.id);
      printed_points = geo.filter(sommets, (d) => searchIds.includes(d.id));
  }
  return printed_points
}
```