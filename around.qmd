---
echo: false
output: false
---

{{< include /common/_data.qmd >}}
{{< include /common/_globals.qmd >}}
{{< include /common/_inputs.qmd >}}
{{< include /common/_labels.qmd >}}
{{< include /common/_leaflet_functions.qmd >}}
{{< include /common/_leaflet_ban.qmd >}}

{{< include /page2/_inputs.qmd >}}


```{ojs}
//| output: true
help_page2 = {
  if (selectlatlng == null){
    return label_find_adress
  }
  return html`<div>${label_choose_radius}</div><div class="radius-selector">${radius}</div>`
} 
```

```{ojs}
//| output: true
//| label: head-page
html
`
<div class="lang-selector">${viewof lang}</div>
<div class="container">
  <div class="message-input-select">${help_page2}</div>
<div/>
`
```


```{ojs}
//| output: true
search = (aroundClimb == null) ? cols : aroundClimb.features.map(d => d.properties)
```



```{ojs}
//| output: true
(width > 400) ?
  html`
  <div class="main-container">
    <div id = "leafletmap" style="width: 40%;">${leafletmap}</div>
    <div class="column spacer" style="width: 2%;">
        <!-- Spacer column -->
    </div>
    <div style="width: 58%;">
      <div id="available-ascent">
      <div><i>${finding_ascent_label}</i></div>
      <br>
      ${table_selected}
      <br>
      </div>
    <div id="statsElement"><i>${no_ascent_label}</i></div>
    </div>
  </div>
  ` :
  html`
    <div id = "leafletmap" style="width: 100%;">${leafletmap}</div>
    <div style="width: 100%;">
      <div id="available-ascent">
      <div><i>${finding_ascent_label}</i></div>
      <br>
      ${table_selected}
      <br>
      </div>
    <div id="statsElement"><i>${no_ascent_label}</i></div>
    </div>
  `
```


```{ojs}
function fetchAndNormalizeGeoJSON(id, baseUrl) {
    return fetch(`${baseUrl}/${id}.geojson`)
        .then(response => response.json())
        .then(normalize) // Assuming `normalize` function is available in the scope
        .catch(error => {
          console.error(`Failed to fetch or normalize GeoJSON for ID: ${id}`, error);
          return null;
        }) ;
}
```

```{ojs}
function mergeGeoJSONs(ids, baseUrl) {
    const promises = ids.map(id => fetchAndNormalizeGeoJSON(id, baseUrl));

    return Promise.all(promises)
        .then(normalizedGeoJSONs => {
            return normalizedGeoJSONs.reduce((output, geojson) => {
                if (geojson && geojson.features) {
                    output.features.push(...geojson.features);
                }
                return output;
            }, {
                type: 'FeatureCollection',
                features: []
            });
        });
}
```


```{ojs}
async function getCombinedGeoJSON(ids, baseUrl) {
  try {
    let combinedGeoJSON = await mergeGeoJSONs(ids, baseUrl);
    console.log('Combined GeoJSON:', combinedGeoJSON);
    // Handle the combined GeoJSON (e.g., display on map)
    return combinedGeoJSON; // This will be a GeoJSON object
  } catch (error) {
    console.error('An error occurred while merging GeoJSONs:', error);
    // Handle the error appropriately
  }
}
```


```{ojs}
function addGeoJSONToMap(geoJSON, map, pointsWithin) {
    L.geoJSON(geoJSON, {
        style: function(feature) {
            // Define the style of the polyline here if needed
            return { color: feature.properties.stroke || 'blue', weight: 4 };
        },
        onEachFeature: function(feature, layer) {
            const id = feature.properties.url.replace(".gpx", '') ;
            const summit_info = geo.filter(pointsWithin, (d) => d.id == id)
            let selectedLayer = null;

            layer.bindTooltip(
              tooltipSummit(
                summit_info.features[0]
              ),
                {permanent: false, direction: 'auto'}
            );

            layer.bindPopup(
              popUpSummit(summit_info.features[0], lang)
            );

            layer.on({
              click: (event) => {
                if (selectedLayer && selectedLayer != layer) {
                      selectedLayer.setStyle({
                        color: selectedLayer.feature.properties.stroke || 'blue', // Reset to original color
                        weight: 4 // Reset to original weight
                      });
                    }
                mutable selectedClimb = summit_info.features[0] ;
                // Set the clicked layer as the new selected layer
                selectedLayer = layer; 
                layer.setStyle({
                        color: 'red', // Set color to red for the selected polyline
                        weight: 4
                    });               
              },
            });

            // Existing event listener for popup opens
            layer.on('popupopen', function() {
              const statsElement = document.getElementById('statsElement');
              const availableAscents = document.getElementById('available-ascent');        
              
              // Update the content of 'statsElement' with the desired statistics from 'feature.properties'
              statsElement.innerHTML = container_ascent(summit_info.features[0], lang, width) ;
              availableAscents.innerHTML = "" ;

              // Fetch route for selected ascent
              fetchAndDisplayAscentRoute(map, summit_info.features[0], 'red');
            });


            layer.on('click', function() {
                this.setStyle({
                    color: 'red', // Change polyline color on mouseover
                    weight: 4 // Increase polyline weight on mouseover
                });
            });
            layer.on('mouseover', function() {
              if (layer !== selectedLayer) {
                this.setStyle({
                    color: 'yellow', // Change polyline color on mouseover
                    weight: 6 // Increase polyline weight on mouseover
                });
              }
            });
            layer.on('mouseout', function() {
              if (layer !== selectedLayer) {
                this.setStyle({
                    color: feature.properties.stroke || 'blue', // Reset color
                    weight: 2 // Reset weight
                });
              }
            });
        }
    }).addTo(map);
}
```


```{=html}
<link href="http://netdna.bootstrapcdn.com/font-awesome/4.0.0/css/font-awesome.css" rel="stylesheet">
<link rel="stylesheet" href="https://raw.githubusercontent.com/lennardv2/Leaflet.awesome-markers/2.0/develop/dist/leaflet.awesome-markers.css">
```

```{ojs}
mutable foundfeatures = null ;
```

```{ojs}
function getPointsWithinCircle(centerCircle, sommets){

    var options = {steps: 64, units: 'kilometers'};
    var circle = turf.circle(
      centerCircle , radiusInner, options
    );
    // Perform spatial query with Turf.js using the drawn circle
    var pointsWithin = turf.pointsWithinPolygon(sommets, circle);

    return pointsWithin    
  }
```


```{ojs}
leafletmap = {

  // Create a container element for leaflet map
  let parent = DOM.element('div', { style: `width:${mapWidth}px;height:${mapHeight}px` });
  yield parent;
  var map = L.map(parent).setView([45.853459, 2.349312], 5);

  const baseUrl = 'https://minio.lab.sspcloud.fr/lgaliana/cyclisme/data/geojson/split';
  var radiustemp = radius ;

  // Add the layer control to the map
  let baseLayers = availableLayers(L, map) ;
  L.control.layers(baseLayers).addTo(map);


  var geocoder = L.geocoderBAN({
    collapsed: false, style: 'searchBar'
    }).addTo(map)

  geocoder.markGeocode = function(feature) {
    var latlng = [feature.geometry.coordinates[1], feature.geometry.coordinates[0]]
    map.setView(latlng, 8)
    mutable selectlatlng = latlng;
    mutable foundfeatures = feature ;
  }

  if (selectlatlng != null){

    console.log(selectlatlng)

    // Center of the circle
    var foundpoint = createIcon(
      null, selectlatlng, "black"
    ).addTo(map);
    foundpoint.bindPopup(foundfeatures.properties.label).openPopup() ;
    // Circle
    var circle = L.circle(selectlatlng, { radius: radiusInner*1000 }).addTo(map);
    map.fitBounds(circle.getBounds())

    // Detect points within circle
    const pointsWithin = getPointsWithinCircle(selectlatlng.reverse(), sommets) ;
    mutable aroundClimb = pointsWithin

    // Add rot

    // Add summit markers
    var geojsonLayer = L.geoJson(
        pointsWithin, {
          onEachFeature: popEventSummit,
          pointToLayer: function(feature, coordinates) {
            return createIcon(feature, coordinates)        
        }
    }).addTo(map);


    // Add ascent routes tracks
    const ids = pointsWithin.features.map(d=> d.properties.id) ;
    getCombinedGeoJSON(ids, baseUrl)
    .then(combinedGeoJSON => {
        // Add each feature from the combined GeoJSON as a separate polyline
        combinedGeoJSON.features.forEach((feature) => {
            addGeoJSONToMap(feature, map, pointsWithin);
        });
    })
    .catch(error => {
        console.error('An error occurred:', error);
    });

    }

  // Define a function that will be called for each feature in your GeoJSON layer
  function popEventSummit(feature, layer) {

      // Add mouseover event listener
      layer.on('mouseover', function() {
        const tooltipMessage = tooltipSummit(feature) ;
        layer.bindTooltip(
          tooltipMessage, {permanent: false, direction: "auto"}
          ).openTooltip();
      });

      // Create popup for ascent summit
      layer.bindPopup(
        popUpSummit(feature, lang)
      );

     layer.on({
       click: whenClicked, //callback functions
     });
      
      // Existing event listener for popup opens
      layer.on('popupopen', function() {
        const statsElement = document.getElementById('statsElement');
        const availableAscents = document.getElementById('available-ascent');        
        
        // Update the content of 'statsElement' with the desired statistics from 'feature.properties'
        statsElement.innerHTML = container_ascent(feature, lang, width) ;
        availableAscents.innerHTML = "" ;

        // Fetch route for selected ascent
        fetchAndDisplayAscentRoute(map, feature, 'red');
      });

  }

}
```

```{ojs}
mutable selectlatlng = null
```

```{ojs}
mutable selectedClimb = null ;
```

```{ojs}
mutable aroundClimb = null
```


```{ojs}
{
  document.querySelector('#stats-denivellation').appendChild(
    rank_ascent(sommets, "denivellation", selectedClimb, lang)
  )
  document.querySelector('#stats-denivellation').appendChild(
    rank_ascent(sommets, "longueur", selectedClimb, lang)
  )

}
```